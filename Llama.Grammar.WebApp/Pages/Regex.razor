@page "/regex"
@using Llama.Grammar.Service
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Regex to GBNF</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Regular Expression to GBNF Converter</MudText>
<MudText Typo="Typo.h6" Class="mb-6 mud-text-secondary">
    Convert regular expressions to GBNF grammars for pattern-based text generation in AI models.
</MudText>

<MudGrid>
    <MudItem xs="12" lg="6">
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Regular Expression Input</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudStack Spacing="4">
                    <div>
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Examples</MudText>
                        <MudButtonGroup Color="Color.Secondary" Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton OnClick="LoadEmailExample">Email</MudButton>
                            <MudButton OnClick="LoadPhoneExample">Phone</MudButton>
                            <MudButton OnClick="LoadDateExample">Date</MudButton>
                            <MudButton OnClick="LoadNumberExample">Number</MudButton>
                            <MudButton OnClick="LoadCustomExample">Custom</MudButton>
                        </MudButtonGroup>
                    </div>

                    <MudTextField T="string" @bind-Value="regexInput" 
                                 Label="Regular Expression" Variant="Variant.Outlined" 
                                 Placeholder="Enter your regex pattern here..."
                                 Class="mud-font-family-monospace"
                                 OnKeyDown="HandleKeyPress" />

                    @if (!string.IsNullOrEmpty(currentDescription))
                    {
                        <MudAlert Severity="Severity.Info">
                            <strong>Pattern:</strong> @currentDescription
                        </MudAlert>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error">
                            <strong>Error:</strong> @errorMessage
                        </MudAlert>
                    }
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                          OnClick="ConvertToGbnf" Disabled="@(isProcessing || string.IsNullOrWhiteSpace(regexInput))"
                          StartIcon="@(isProcessing ? Icons.Material.Filled.HourglassTop : Icons.Material.Filled.Transform)">
                    Convert to GBNF
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" lg="6">
        <MudCard Elevation="2" Style="height: 100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">GBNF Output</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (!string.IsNullOrEmpty(gbnfOutput))
                {
                    <MudStack>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" 
                                  StartIcon="Icons.Material.Filled.ContentCopy" OnClick="CopyToClipboard">
                            Copy to Clipboard
                        </MudButton>
                        <MudPaper Class="pa-4" Elevation="0" Style="background-color: var(--mud-palette-background-grey);">
                            <MudText Typo="Typo.body2" Style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@gbnfOutput</MudText>
                        </MudPaper>
                    </MudStack>
                }
                else if (!isProcessing)
                {
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Enter a regular expression and convert it to see the GBNF output here.
                    </MudText>
                }
                else
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText>Converting...</MudText>
                    </MudStack>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudCard Elevation="2" Class="mt-6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Supported Regex Features</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6" Class="mb-2">Character Classes</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem T="string"><MudText><code>[abc]</code> - Character set</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>[a-z]</code> - Character range</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>[^abc]</code> - Negated set</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>\d</code> - Digits</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>\w</code> - Word characters</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>\s</code> - Whitespace</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>.</code> - Any character</MudText></MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6" Class="mb-2">Quantifiers</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem T="string"><MudText><code>*</code> - Zero or more</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>+</code> - One or more</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>?</code> - Zero or one</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>{n}</code> - Exactly n</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>{n,m}</code> - Between n and m</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>{n,}</code> - n or more</MudText></MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6" Class="mb-2">Anchors & Groups</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem T="string"><MudText><code>^</code> - Start of string</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>$</code> - End of string</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>()</code> - Capturing group</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>(?:)</code> - Non-capturing group</MudText></MudListItem>
                </MudList>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h6" Class="mb-2">Alternation</MudText>
                <MudList T="string" Dense="true">
                    <MudListItem T="string"><MudText><code>|</code> - OR operator</MudText></MudListItem>
                    <MudListItem T="string"><MudText><code>\\</code> - Escape character</MudText></MudListItem>
                </MudList>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudCard Elevation="2" Class="mt-6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Example Patterns</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable T="RegexExample" Items="examplePatterns" Dense="true" Hover="true" Striped="true">
            <HeaderContent>
                <MudTh>Pattern</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Example Matches</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudText Typo="Typo.body2" Style="font-family: 'Consolas', 'Monaco', monospace;">@context.Pattern</MudText>
                </MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.Examples</MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    private string regexInput = "";
    private string currentDescription = "";
    private string gbnfOutput = "";
    private string errorMessage = "";
    private bool isProcessing = false;
    private IGbnfGrammar grammar = new GbnfGrammar();

    public class RegexExample
    {
        public string Pattern { get; set; } = "";
        public string Description { get; set; } = "";
        public string Examples { get; set; } = "";
    }

    private readonly List<RegexExample> examplePatterns = new()
    {
        new() { Pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", Description = "Email address", Examples = "user@example.com, test.email+tag@domain.co.uk" },
        new() { Pattern = "^(\\+1-?)?[0-9]{3}-?[0-9]{3}-?[0-9]{4}$", Description = "US phone number", Examples = "123-456-7890, +1-555-123-4567" },
        new() { Pattern = "^\\d{4}-\\d{2}-\\d{2}$", Description = "Date (YYYY-MM-DD)", Examples = "2023-12-25, 1999-01-01" },
        new() { Pattern = "^[A-Z]{2}[0-9]{2}[A-Z0-9]{3}[0-9]{7}([A-Z0-9]?){0,16}$", Description = "IBAN code", Examples = "GB29NWBK60161331926819" }
    };

    protected override void OnInitialized()
    {
        LoadExample("email");
    }

    private void LoadEmailExample() => LoadExample("email");
    private void LoadPhoneExample() => LoadExample("phone");
    private void LoadDateExample() => LoadExample("date");
    private void LoadNumberExample() => LoadExample("number");
    private void LoadCustomExample() => LoadExample("custom");

    private void LoadExample(string example)
    {
        (regexInput, currentDescription) = example switch
        {
            "email" => (
                @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$",
                "Email address validation"
            ),
            "phone" => (
                @"^(\+1-?)?[0-9]{3}-?[0-9]{3}-?[0-9]{4}$",
                "US phone number with optional country code"
            ),
            "date" => (
                @"^\d{4}-\d{2}-\d{2}$",
                "Date in YYYY-MM-DD format"
            ),
            "number" => (
                @"^-?\d+(\.\d+)?$",
                "Decimal number (positive or negative)"
            ),
            "custom" => (
                @"^[A-Z]{2,4}[0-9]{4,8}$",
                "Custom pattern: 2-4 uppercase letters followed by 4-8 digits"
            ),
            _ => ("", "")
        };
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ConvertToGbnf();
        }
    }

    private async Task ConvertToGbnf()
    {
        try
        {
            isProcessing = true;
            errorMessage = "";
            
            if (string.IsNullOrWhiteSpace(regexInput))
            {
                errorMessage = "Please provide a regular expression.";
                return;
            }

            await Task.Delay(100); // Small delay to show loading state
            gbnfOutput = grammar.ConvertRegexpToGbnf(regexInput);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            gbnfOutput = "";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task CopyToClipboard()
    {
        if (string.IsNullOrEmpty(gbnfOutput))
        {
            Snackbar.Add("No content to copy", Severity.Warning);
            return;
        }

        try
        {
            // Check if clipboard functions are available
            var isAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.clipboardFunctions !== 'undefined' && typeof window.clipboardFunctions.writeText === 'function'");
            
            if (!isAvailable)
            {
                Snackbar.Add("Clipboard functionality is not available", Severity.Error);
                return;
            }

            var result = await JSRuntime.InvokeAsync<ClipboardResult>("clipboardFunctions.writeText", gbnfOutput);
            
            if (result.Success)
            {
                Snackbar.Add(result.Message, Severity.Success);
            }
            else
            {
                Snackbar.Add(result.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to copy to clipboard: {ex.Message}", Severity.Error);
        }
    }

    public class ClipboardResult
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
    }
}