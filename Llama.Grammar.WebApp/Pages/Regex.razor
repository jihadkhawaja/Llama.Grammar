@page "/regex"
@using Llama.Grammar.Service

<PageTitle>Regex to GBNF</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Regular Expression to GBNF Converter</h1>
            <p class="lead">
                Convert regular expressions to GBNF grammars for pattern-based text generation in AI models.
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Regular Expression Input</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Examples</label>
                        <div class="d-flex gap-2 flex-wrap mb-3">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="LoadEmailExample">Email</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="LoadPhoneExample">Phone</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="LoadDateExample">Date</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="LoadNumberExample">Number</button>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="LoadCustomExample">Custom</button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="regexInput" class="form-label">Regular Expression</label>
                        <input type="text" 
                               class="form-control font-monospace" 
                               id="regexInput" 
                               @bind="regexInput" 
                               placeholder="Enter your regex pattern here..."
                               @onkeypress="HandleKeyPress" />
                    </div>

                    @if (!string.IsNullOrEmpty(currentDescription))
                    {
                        <div class="alert alert-info">
                            <small><strong>Pattern:</strong> @currentDescription</small>
                        </div>
                    }
                    
                    <button class="btn btn-primary" @onclick="ConvertToGbnf" disabled="@(isProcessing || string.IsNullOrWhiteSpace(regexInput))">
                        @if (isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Convert to GBNF
                    </button>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            <strong>Error:</strong> @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">GBNF Output</h5>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(gbnfOutput))
                    {
                        <div class="mb-3">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="CopyToClipboard">
                                Copy to Clipboard
                            </button>
                        </div>
                        <pre class="bg-light p-3 rounded"><code>@gbnfOutput</code></pre>
                    }
                    else if (!isProcessing)
                    {
                        <p class="text-muted">Enter a regular expression and convert it to see the GBNF output here.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Supported Regex Features</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Character Classes</h6>
                            <ul class="list-unstyled">
                                <li><code>[abc]</code> - Character set</li>
                                <li><code>[a-z]</code> - Character range</li>
                                <li><code>[^abc]</code> - Negated set</li>
                                <li><code>\d</code> - Digits</li>
                                <li><code>\w</code> - Word characters</li>
                                <li><code>\s</code> - Whitespace</li>
                                <li><code>.</code> - Any character</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Quantifiers</h6>
                            <ul class="list-unstyled">
                                <li><code>*</code> - Zero or more</li>
                                <li><code>+</code> - One or more</li>
                                <li><code>?</code> - Zero or one</li>
                                <li><code>{n}</code> - Exactly n</li>
                                <li><code>{n,m}</code> - Between n and m</li>
                                <li><code>{n,}</code> - n or more</li>
                            </ul>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <h6>Anchors & Groups</h6>
                            <ul class="list-unstyled">
                                <li><code>^</code> - Start of string</li>
                                <li><code>$</code> - End of string</li>
                                <li><code>()</code> - Capturing group</li>
                                <li><code>(?:)</code> - Non-capturing group</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Alternation</h6>
                            <ul class="list-unstyled">
                                <li><code>|</code> - OR operator</li>
                                <li><code>\\</code> - Escape character</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Example Patterns</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Pattern</th>
                                    <th>Description</th>
                                    <th>Example Matches</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><code>^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$</code></td>
                                    <td>Email address</td>
                                    <td>user@@example.com, test.email+tag@@domain.co.uk</td>
                                </tr>
                                <tr>
                                    <td><code>^(\+1-?)?[0-9]{3}-?[0-9]{3}-?[0-9]{4}$</code></td>
                                    <td>US phone number</td>
                                    <td>123-456-7890, +1-555-123-4567</td>
                                </tr>
                                <tr>
                                    <td><code>^\d{4}-\d{2}-\d{2}$</code></td>
                                    <td>Date (YYYY-MM-DD)</td>
                                    <td>2023-12-25, 1999-01-01</td>
                                </tr>
                                <tr>
                                    <td><code>^[A-Z]{2}[0-9]{2}[A-Z0-9]{3}[0-9]{7}([A-Z0-9]?){0,16}$</code></td>
                                    <td>IBAN code</td>
                                    <td>GB29NWBK60161331926819</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string regexInput = "";
    private string currentDescription = "";
    private string gbnfOutput = "";
    private string errorMessage = "";
    private bool isProcessing = false;
    private IGbnfGrammar grammar = new GbnfGrammar();

    protected override void OnInitialized()
    {
        LoadExample("email");
    }

    private void LoadEmailExample() => LoadExample("email");
    private void LoadPhoneExample() => LoadExample("phone");
    private void LoadDateExample() => LoadExample("date");
    private void LoadNumberExample() => LoadExample("number");
    private void LoadCustomExample() => LoadExample("custom");

    private void LoadExample(string example)
    {
        (regexInput, currentDescription) = example switch
        {
            "email" => (
                @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$",
                "Email address validation"
            ),
            "phone" => (
                @"^(\+1-?)?[0-9]{3}-?[0-9]{3}-?[0-9]{4}$",
                "US phone number with optional country code"
            ),
            "date" => (
                @"^\d{4}-\d{2}-\d{2}$",
                "Date in YYYY-MM-DD format"
            ),
            "number" => (
                @"^-?\d+(\.\d+)?$",
                "Decimal number (positive or negative)"
            ),
            "custom" => (
                @"^[A-Z]{2,4}[0-9]{4,8}$",
                "Custom pattern: 2-4 uppercase letters followed by 4-8 digits"
            ),
            _ => ("", "")
        };
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ConvertToGbnf();
        }
    }

    private async Task ConvertToGbnf()
    {
        try
        {
            isProcessing = true;
            errorMessage = "";
            
            if (string.IsNullOrWhiteSpace(regexInput))
            {
                errorMessage = "Please provide a regular expression.";
                return;
            }

            await Task.Delay(100); // Small delay to show loading state
            gbnfOutput = grammar.ConvertRegexpToGbnf(regexInput);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            gbnfOutput = "";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await Task.Run(() => System.Console.WriteLine("Copy to clipboard: " + gbnfOutput));
            // In a real application, you would use JavaScript interop to copy to clipboard
        }
        catch
        {
            // Fallback for environments where clipboard isn't available
        }
    }
}