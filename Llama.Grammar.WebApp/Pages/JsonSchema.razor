@page "/json-schema"
@using Llama.Grammar.Service
@using Llama.Grammar.Helper

<PageTitle>JSON Schema to GBNF</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">JSON Schema to GBNF Converter</MudText>
<MudText Typo="Typo.h6" Class="mb-6 mud-text-secondary">
    Convert JSON Schema definitions to GBNF grammars. You can either use the fluent builder or provide raw JSON schema.
</MudText>

<MudGrid>
    <MudItem xs="12" lg="6">
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudTabs Elevation="0" Rounded="true" PanelClass="pa-4" @bind-ActivePanelIndex="activeTabIndex">
                        <MudTabPanel Text="Builder">
                            <MudStack Spacing="4">
                                <div>
                                    <MudText Typo="Typo.subtitle2" Class="mb-2">Examples</MudText>
                                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                                        <MudButton OnClick="LoadPersonExample">Person</MudButton>
                                        <MudButton OnClick="LoadProductExample">Product</MudButton>
                                        <MudButton OnClick="LoadCustomExample">Custom</MudButton>
                                    </MudButtonGroup>
                                </div>
                                <MudAlert Severity="Severity.Info">
                                    Using builder mode - this generates the JSON schema using the fluent API.
                                </MudAlert>
                            </MudStack>
                        </MudTabPanel>
                        <MudTabPanel Text="Raw JSON">
                            <MudStack Spacing="4">
                                <MudTextField T="string" @bind-Value="jsonSchemaInput" 
                                             Label="JSON Schema" Variant="Variant.Outlined" 
                                             Lines="15" Placeholder="Enter your JSON Schema here..."
                                             Class="mud-font-family-monospace" />
                                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="LoadJsonExample">
                                    Load Example
                                </MudButton>
                            </MudStack>
                        </MudTabPanel>
                    </MudTabs>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                          OnClick="ConvertToGbnf" Disabled="isProcessing"
                          StartIcon="@(isProcessing ? Icons.Material.Filled.HourglassTop : Icons.Material.Filled.Transform)">
                    Convert to GBNF
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" lg="6">
        <MudCard Elevation="2" Style="height: 100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">GBNF Output</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4">
                        <strong>Error:</strong> @errorMessage
                    </MudAlert>
                }
                @if (!string.IsNullOrEmpty(gbnfOutput))
                {
                    <MudStack>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" 
                                  StartIcon="Icons.Material.Filled.ContentCopy" OnClick="CopyToClipboard">
                            Copy to Clipboard
                        </MudButton>
                        <MudPaper Class="pa-4" Elevation="0" Style="background-color: var(--mud-palette-background-grey);">
                            <MudText Typo="Typo.body2" Style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@gbnfOutput</MudText>
                        </MudPaper>
                    </MudStack>
                }
                else if (!isProcessing)
                {
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Convert a JSON schema to see the GBNF output here.
                    </MudText>
                }
                else
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText>Converting...</MudText>
                    </MudStack>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@if (!string.IsNullOrEmpty(generatedJson))
{
    <MudCard Elevation="2" Class="mt-6">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Generated JSON Schema</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudPaper Class="pa-4" Elevation="0" Style="background-color: var(--mud-palette-background-grey);">
                <MudText Typo="Typo.body2" Style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@generatedJson</MudText>
            </MudPaper>
        </MudCardContent>
    </MudCard>
}

@code {
    private int activeTabIndex = 0;
    private string jsonSchemaInput = "";
    private string gbnfOutput = "";
    private string generatedJson = "";
    private string errorMessage = "";
    private bool isProcessing = false;
    private IGbnfGrammar grammar = new GbnfGrammar();

    protected override void OnInitialized()
    {
        LoadPersonExample();
    }

    private void LoadPersonExample()
    {
        activeTabIndex = 0;
        ConvertBuilderExample("person");
    }

    private void LoadProductExample()
    {
        activeTabIndex = 0;
        ConvertBuilderExample("product");
    }

    private void LoadCustomExample()
    {
        activeTabIndex = 0;
        ConvertBuilderExample("custom");
    }

    private void LoadJsonExample()
    {
        jsonSchemaInput = @"{
  ""type"": ""object"",
  ""properties"": {
    ""name"": {
      ""type"": ""string""
    },
    ""age"": {
      ""type"": ""integer""
    },
    ""email"": {
      ""type"": ""string"",
      ""pattern"": ""^[^@]+@[^@]+\\.[^@]+$""
    },
    ""hobbies"": {
      ""type"": ""array"",
      ""items"": {
        ""type"": ""string""
      },
      ""minItems"": 1,
      ""maxItems"": 5
    }
  },
  ""required"": [""name"", ""age""]
}";
    }

    private void ConvertBuilderExample(string example)
    {
        try
        {
            isProcessing = true;
            errorMessage = "";
            
            SchemaBuilder schemaBuilder = example switch
            {
                "person" => new SchemaBuilder()
                    .Type("object")
                    .Properties(p => p
                        .Add("name", s => s.Type("string"))
                        .Add("age", s => s.Type("integer"))
                        .Add("nicknames", s => s.Type("array")
                                                .MinItems(1)
                                                .MaxItems(3)
                                                .Items(i => i.Type("string"))))
                    .Required("name", "age"),
                
                "product" => new SchemaBuilder()
                    .Type("object")
                    .Properties(p => p
                        .Add("id", s => s.Type("integer"))
                        .Add("name", s => s.Type("string"))
                        .Add("price", s => s.Type("number"))
                        .Add("category", s => s.Enum("electronics", "clothing", "books", "home"))
                        .Add("inStock", s => s.Type("boolean"))
                        .Add("tags", s => s.Type("array").Items(i => i.Type("string"))))
                    .Required("id", "name", "price"),
                
                _ => new SchemaBuilder()
                    .Type("object")
                    .Properties(p => p
                        .Add("status", s => s.Const("success"))
                        .Add("data", s => s.Type("object")
                            .Properties(pp => pp
                                .Add("message", ss => ss.Type("string"))
                                .Add("timestamp", ss => ss.Type("string").Pattern("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z"))))
                        .Add("count", s => s.Type("integer")))
                    .Required("status", "data")
            };

            generatedJson = schemaBuilder.ToJson();
            gbnfOutput = grammar.ConvertJsonSchemaToGbnf(generatedJson);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            gbnfOutput = "";
            generatedJson = "";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ConvertToGbnf()
    {
        try
        {
            isProcessing = true;
            errorMessage = "";
            
            if (activeTabIndex == 0) // Builder tab
            {
                ConvertBuilderExample("person"); // Default to person example if in builder mode
            }
            else // Raw JSON tab
            {
                if (string.IsNullOrWhiteSpace(jsonSchemaInput))
                {
                    errorMessage = "Please provide a JSON schema.";
                    return;
                }

                generatedJson = "";
                gbnfOutput = grammar.ConvertJsonSchemaToGbnf(jsonSchemaInput);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            gbnfOutput = "";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task CopyToClipboard()
    {
        // Note: Clipboard API requires HTTPS in production
        try
        {
            await Task.Run(() => System.Console.WriteLine("Copy to clipboard: " + gbnfOutput));
            // In a real application, you would use JavaScript interop to copy to clipboard
        }
        catch
        {
            // Fallback for environments where clipboard isn't available
        }
    }
}