@page "/csharp-type"
@using Llama.Grammar.Service
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>C# Type to GBNF</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">C# Type to GBNF Converter</MudText>
<MudText Typo="Typo.h6" Class="mb-6 mud-text-secondary">
    Generate GBNF grammars directly from predefined C# types. Select from examples or see how different C# constructs translate to GBNF.
</MudText>

<MudGrid>
    <MudItem xs="12" lg="6">
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">C# Type Examples</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudStack Spacing="4">
                    <div>
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Select a C# Type Example</MudText>
                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton OnClick="LoadPersonExample">Person</MudButton>
                            <MudButton OnClick="LoadProductExample">Product</MudButton>
                            <MudButton OnClick="LoadAddressExample">Address</MudButton>
                            <MudButton OnClick="LoadOrderExample">Order</MudButton>
                        </MudButtonGroup>
                    </div>

                    @if (!string.IsNullOrEmpty(currentTypeCode))
                    {
                        <div>
                            <MudText Typo="Typo.subtitle2" Class="mb-2">C# Type Definition</MudText>
                            <MudPaper Class="pa-4" Elevation="0" Style="background-color: var(--mud-palette-background-grey);">
                                <MudText Typo="Typo.body2" Style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@currentTypeCode</MudText>
                            </MudPaper>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error">
                            <strong>Error:</strong> @errorMessage
                        </MudAlert>
                    }
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                          OnClick="ConvertToGbnf" Disabled="isProcessing"
                          StartIcon="@(isProcessing ? Icons.Material.Filled.HourglassTop : Icons.Material.Filled.Transform)">
                    Convert to GBNF
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    
    <MudItem xs="12" lg="6">
        <MudCard Elevation="2" Style="height: 100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">GBNF Output</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (!string.IsNullOrEmpty(gbnfOutput))
                {
                    <MudStack>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" 
                                  StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="CopyToClipboard">
                            Copy to Clipboard
                        </MudButton>
                        <MudPaper Class="pa-4" Elevation="0" Style="background-color: var(--mud-palette-background-grey);">
                            <MudText Typo="Typo.body2" Style="white-space: pre-wrap; font-family: 'Consolas', 'Monaco', monospace;">@gbnfOutput</MudText>
                        </MudPaper>
                    </MudStack>
                }
                else if (!isProcessing)
                {
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Select a C# type example and convert it to see the GBNF output here.
                    </MudText>
                }
                else
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText>Converting...</MudText>
                    </MudStack>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudCard Elevation="2" Class="mt-6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">How it Works</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body1" Class="mb-4">
            The C# type converter analyzes your class definitions and automatically generates the corresponding GBNF grammar. It supports:
        </MudText>
        <MudList T="string">
            <MudListItem T="string" Icon="Icons.Material.Filled.DataObject">
                <MudText><strong>Properties:</strong> Public properties are converted to JSON schema properties</MudText>
            </MudListItem>
            <MudListItem T="string" Icon="Icons.Material.Filled.AccountTree">
                <MudText><strong>Nested Objects:</strong> Complex types are recursively converted</MudText>
            </MudListItem>
            <MudListItem T="string" Icon="Icons.Material.Filled.ViewList">
                <MudText><strong>Collections:</strong> Lists, arrays, and IEnumerable types become array schemas</MudText>
            </MudListItem>
            <MudListItem T="string" Icon="Icons.Material.Filled.QuestionMark">
                <MudText><strong>Nullable Types:</strong> Nullable types allow null values in the schema</MudText>
            </MudListItem>
            <MudListItem T="string" Icon="Icons.Material.Filled.List">
                <MudText><strong>Enums:</strong> Enums are converted to constrained string values</MudText>
            </MudListItem>
            <MudListItem T="string" Icon="Icons.Material.Filled.Code">
                <MudText><strong>Basic Types:</strong> string → "string", int → "integer", bool → "boolean", etc.</MudText>
            </MudListItem>
        </MudList>
    </MudCardContent>
</MudCard>

@code {
    private string currentTypeCode = "";
    private string gbnfOutput = "";
    private string errorMessage = "";
    private bool isProcessing = false;
    private string currentExample = "";
    private IGbnfGrammar grammar = new GbnfGrammar();

    // Example types
    public class Person
    {
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
        public List<string> Nicknames { get; set; } = new();
        public Address? HomeAddress { get; set; }
    }

    public class Address
    {
        public string Street { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string? ZipCode { get; set; }
        public string Country { get; set; } = string.Empty;
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public ProductCategory Category { get; set; }
        public bool InStock { get; set; }
        public List<string> Tags { get; set; } = new();
        public DateTime CreatedAt { get; set; }
    }

    public enum ProductCategory
    {
        Electronics,
        Clothing,
        Books,
        Home,
        Sports
    }

    public class Order
    {
        public string OrderId { get; set; } = string.Empty;
        public Person Customer { get; set; } = new();
        public List<OrderItem> Items { get; set; } = new();
        public decimal TotalAmount { get; set; }
        public OrderStatus Status { get; set; }
        public DateTime OrderDate { get; set; }
    }

    public class OrderItem
    {
        public Product Product { get; set; } = new();
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
    }

    public enum OrderStatus
    {
        Pending,
        Processing,
        Shipped,
        Delivered,
        Cancelled
    }

    protected override void OnInitialized()
    {
        LoadExample("person");
    }

    private void LoadPersonExample() => LoadExample("person");
    private void LoadProductExample() => LoadExample("product");
    private void LoadAddressExample() => LoadExample("address");
    private void LoadOrderExample() => LoadExample("order");

    private void LoadExample(string example)
    {
        currentExample = example;
        currentTypeCode = example switch
        {
            "person" => @"public class Person
{
    public string Name { get; set; } = string.Empty;
    public int Age { get; set; }
    public List<string> Nicknames { get; set; } = new();
    public Address? HomeAddress { get; set; }
}

public class Address
{
    public string Street { get; set; } = string.Empty;
    public string City { get; set; } = string.Empty;
    public string? ZipCode { get; set; }
    public string Country { get; set; } = string.Empty;
}",
            "product" => @"public class Product
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public decimal Price { get; set; }
    public ProductCategory Category { get; set; }
    public bool InStock { get; set; }
    public List<string> Tags { get; set; } = new();
    public DateTime CreatedAt { get; set; }
}

public enum ProductCategory
{
    Electronics, Clothing, Books, Home, Sports
}",
            "address" => @"public class Address
{
    public string Street { get; set; } = string.Empty;
    public string City { get; set; } = string.Empty;
    public string? ZipCode { get; set; }
    public string Country { get; set; } = string.Empty;
}",
            "order" => @"public class Order
{
    public string OrderId { get; set; } = string.Empty;
    public Person Customer { get; set; } = new();
    public List<OrderItem> Items { get; set; } = new();
    public decimal TotalAmount { get; set; }
    public OrderStatus Status { get; set; }
    public DateTime OrderDate { get; set; }
}

public class OrderItem
{
    public Product Product { get; set; } = new();
    public int Quantity { get; set; }
    public decimal UnitPrice { get; set; }
}

public enum OrderStatus
{
    Pending, Processing, Shipped, Delivered, Cancelled
}",
            _ => ""
        };
    }

    private void ConvertToGbnf()
    {
        try
        {
            isProcessing = true;
            errorMessage = "";
            
            gbnfOutput = currentExample switch
            {
                "person" => grammar.ConvertTypeToGbnf<Person>(),
                "product" => grammar.ConvertTypeToGbnf<Product>(),
                "address" => grammar.ConvertTypeToGbnf<Address>(),
                "order" => grammar.ConvertTypeToGbnf<Order>(),
                _ => ""
            };
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            gbnfOutput = "";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task CopyToClipboard()
    {
        if (string.IsNullOrEmpty(gbnfOutput))
        {
            Snackbar.Add("No content to copy", Severity.Warning);
            return;
        }

        try
        {
            // Check if clipboard functions are available
            var isAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.clipboardFunctions !== 'undefined' && typeof window.clipboardFunctions.writeText === 'function'");
            
            if (!isAvailable)
            {
                Snackbar.Add("Clipboard functionality is not available", Severity.Error);
                return;
            }

            var result = await JSRuntime.InvokeAsync<ClipboardResult>("clipboardFunctions.writeText", gbnfOutput);
            
            if (result.Success)
            {
                Snackbar.Add(result.Message, Severity.Success);
            }
            else
            {
                Snackbar.Add(result.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to copy to clipboard: {ex.Message}", Severity.Error);
        }
    }

    public class ClipboardResult
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
    }
}